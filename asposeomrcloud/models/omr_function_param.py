# coding: utf-8
"""
Copyright (c) 2018 Aspose Pty Ltd. All Rights Reserved.

Licensed under the MIT (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

      https://github.com/aspose-omr-cloud/aspose-omr-cloud-python/blob/master/LICENSE

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.



    Aspose.OMR for Cloud API Reference

    Aspose.OMR for Cloud helps performing optical mark recognition in the cloud

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
from pprint import pformat
from six import iteritems
import re


class OMRFunctionParam(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'function_param': 'str',
        'additional_param': 'str'
    }

    attribute_map = {
        'function_param': 'FunctionParam',
        'additional_param': 'AdditionalParam'
    }

    def __init__(self, function_param=None, additional_param=None):
        """
        OMRFunctionParam - a model defined in Swagger
        """

        self._function_param = None
        self._additional_param = None
        self.discriminator = None

        if function_param is not None:
          self.function_param = function_param
        if additional_param is not None:
          self.additional_param = additional_param

    @property
    def function_param(self):
        """
        Gets the function_param of this OMRFunctionParam.
        FunctionParam  depends on operation

        :return: The function_param of this OMRFunctionParam.
        :rtype: str
        """
        return self._function_param

    @function_param.setter
    def function_param(self, function_param):
        """
        Sets the function_param of this OMRFunctionParam.
        FunctionParam  depends on operation

        :param function_param: The function_param of this OMRFunctionParam.
        :type: str
        """

        self._function_param = function_param

    @property
    def additional_param(self):
        """
        Gets the additional_param of this OMRFunctionParam.
        AdditionalParam depends on operation 

        :return: The additional_param of this OMRFunctionParam.
        :rtype: str
        """
        return self._additional_param

    @additional_param.setter
    def additional_param(self, additional_param):
        """
        Sets the additional_param of this OMRFunctionParam.
        AdditionalParam depends on operation 

        :param additional_param: The additional_param of this OMRFunctionParam.
        :type: str
        """

        self._additional_param = additional_param

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, OMRFunctionParam):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
