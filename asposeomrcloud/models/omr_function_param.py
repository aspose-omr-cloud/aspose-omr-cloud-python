# coding: utf-8
# """Copyright
# --------------------------------------------------------------------------------------------------------------------
# <copyright company="Aspose" file="omr_function_param.py">
# Copyright (c) 2020 Aspose.OMR for Cloud
# </copyright>
# <summary>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# </summary>
# --------------------------------------------------------------------------------------------------------------------
# """

from asposeomrcloud.models import BaseModel

from pprint import pformat
from six import iteritems


class OmrFunctionParam(BaseModel):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    model_types = {
        'function_param': 'str',
        'additional_param': 'str'
    }

    swagger_types = {
        'function_param': 'str',
        'additional_param': 'str'
    }

    attribute_map = {
        'function_param': 'functionParam',
        'additional_param': 'additionalParam'
    }

    def __init__(self, function_param=None, additional_param=None):

        self._function_param = None
        self._additional_param = None
        self.discriminator = None

        if function_param is not None:
            self.function_param = function_param
        if additional_param is not None:
            self.additional_param = additional_param

    @property
    def function_param(self):
        """
        Gets the function_param of this OmrFunctionParam.
        FunctionParam  depends on operation
        :return: The function_param of this OmrFunctionParam.
        :rtype: str
        """
        return self._function_param

    @function_param.setter
    def function_param(self, function_param):
        """
        Sets the function_param of this OmrFunctionParam.
        FunctionParam  depends on operation
        :param function_param: The function_param of this OmrFunctionParam.
        :type: str
        """

        self._function_param = function_param

    @property
    def additional_param(self):
        """
        Gets the additional_param of this OmrFunctionParam.
        AdditionalParam depends on operation
        :return: The additional_param of this OmrFunctionParam.
        :rtype: str
        """
        return self._additional_param

    @additional_param.setter
    def additional_param(self, additional_param):
        """
        Sets the additional_param of this OmrFunctionParam.
        AdditionalParam depends on operation
        :param additional_param: The additional_param of this OmrFunctionParam.
        :type: str
        """

        self._additional_param = additional_param

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, OmrFunctionParam):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other