# coding: utf-8
"""
Copyright (c) 2018 Aspose Pty Ltd. All Rights Reserved.

Licensed under the MIT (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

      https://github.com/aspose-omr-cloud/aspose-omr-cloud-python/blob/master/LICENSE

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.



    Aspose.OMR for Cloud API Reference

    Aspose.OMR for Cloud helps performing optical mark recognition in the cloud

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
from pprint import pformat
from six import iteritems
import re


class ServerStat(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'storage_download_time': 'str',
        'omr_function_call_time': 'str'
    }

    attribute_map = {
        'storage_download_time': 'StorageDownloadTime',
        'omr_function_call_time': 'OmrFunctionCallTime'
    }

    def __init__(self, storage_download_time=None, omr_function_call_time=None):
        """
        ServerStat - a model defined in Swagger
        """

        self._storage_download_time = None
        self._omr_function_call_time = None
        self.discriminator = None

        self.storage_download_time = storage_download_time
        self.omr_function_call_time = omr_function_call_time

    @property
    def storage_download_time(self):
        """
        Gets the storage_download_time of this ServerStat.
        Get or set StorageDownloadTime

        :return: The storage_download_time of this ServerStat.
        :rtype: str
        """
        return self._storage_download_time

    @storage_download_time.setter
    def storage_download_time(self, storage_download_time):
        """
        Sets the storage_download_time of this ServerStat.
        Get or set StorageDownloadTime

        :param storage_download_time: The storage_download_time of this ServerStat.
        :type: str
        """
        if storage_download_time is None:
            raise ValueError("Invalid value for `storage_download_time`, must not be `None`")

        self._storage_download_time = storage_download_time

    @property
    def omr_function_call_time(self):
        """
        Gets the omr_function_call_time of this ServerStat.
        Get or set OmrFunctionCallTime

        :return: The omr_function_call_time of this ServerStat.
        :rtype: str
        """
        return self._omr_function_call_time

    @omr_function_call_time.setter
    def omr_function_call_time(self, omr_function_call_time):
        """
        Sets the omr_function_call_time of this ServerStat.
        Get or set OmrFunctionCallTime

        :param omr_function_call_time: The omr_function_call_time of this ServerStat.
        :type: str
        """
        if omr_function_call_time is None:
            raise ValueError("Invalid value for `omr_function_call_time`, must not be `None`")

        self._omr_function_call_time = omr_function_call_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ServerStat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
