# coding: utf-8
"""
Copyright (c) 2018 Aspose Pty Ltd. All Rights Reserved.

Licensed under the MIT (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

      https://github.com/aspose-omr-cloud/aspose-omr-cloud-python/blob/master/LICENSE

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.



    Aspose.OMR for Cloud API Reference

    Aspose.OMR for Cloud helps performing optical mark recognition in the cloud

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class OmrApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, app_key, app_sid, base_path = None):
        self.api_client = ApiClient(app_key, app_sid, base_path)

    def post_run_omr_task(self, name, action_name, **kwargs):
        """
        Run specific OMR task
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_run_omr_task(name, action_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of the file to recognize. (required)
        :param str action_name: Action name ['CorrectTemplate', 'FinalizeTemplate', 'RecognizeImage'] (required)
        :param OMRFunctionParam param: Function params, specific for each actionName
        :param str storage: Image's storage.
        :param str folder: Image's folder.
        :return: OMRResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_run_omr_task_with_http_info(name, action_name, **kwargs)
        else:
            (data) = self.post_run_omr_task_with_http_info(name, action_name, **kwargs)
            return data

    def post_run_omr_task_with_http_info(self, name, action_name, **kwargs):
        """
        Run specific OMR task
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_run_omr_task_with_http_info(name, action_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of the file to recognize. (required)
        :param str action_name: Action name ['CorrectTemplate', 'FinalizeTemplate', 'RecognizeImage'] (required)
        :param OMRFunctionParam param: Function params, specific for each actionName
        :param str storage: Image's storage.
        :param str folder: Image's folder.
        :return: OMRResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'action_name', 'param', 'storage', 'folder']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_run_omr_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_run_omr_task`")
        # verify the required parameter 'action_name' is set
        if ('action_name' not in params) or (params['action_name'] is None):
            raise ValueError("Missing the required parameter `action_name` when calling `post_run_omr_task`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = []
        if 'action_name' in params:
            query_params.append(('actionName', params['action_name']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'param' in params:
            body_params = params['param']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/omr/{name}/runOmrTask', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='OMRResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
