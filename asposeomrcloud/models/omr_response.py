# coding: utf-8
"""
Copyright (c) 2018 Aspose Pty Ltd. All Rights Reserved.

Licensed under the MIT (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

      https://github.com/aspose-omr-cloud/aspose-omr-cloud-python/blob/master/LICENSE

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.



    Aspose.OMR for Cloud API Reference

    Aspose.OMR for Cloud helps performing optical mark recognition in the cloud

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
from pprint import pformat
from six import iteritems
import re


class OMRResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'error_code': 'int',
        'error_text': 'str',
        'payload': 'Payload',
        'server_stat': 'ServerStat'
    }

    attribute_map = {
        'status': 'Status',
        'error_code': 'ErrorCode',
        'error_text': 'ErrorText',
        'payload': 'Payload',
        'server_stat': 'ServerStat'
    }

    def __init__(self, status=None, error_code=None, error_text=None, payload=None, server_stat=None):
        """
        OMRResponse - a model defined in Swagger
        """

        self._status = None
        self._error_code = None
        self._error_text = None
        self._payload = None
        self._server_stat = None
        self.discriminator = None

        if status is not None:
          self.status = status
        if error_code is not None:
          self.error_code = error_code
        if error_text is not None:
          self.error_text = error_text
        if payload is not None:
          self.payload = payload
        if server_stat is not None:
          self.server_stat = server_stat

    @property
    def status(self):
        """
        Gets the status of this OMRResponse.
        Indicates operation's status

        :return: The status of this OMRResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this OMRResponse.
        Indicates operation's status

        :param status: The status of this OMRResponse.
        :type: str
        """

        self._status = status

    @property
    def error_code(self):
        """
        Gets the error_code of this OMRResponse.
        Integer field that indicates whether any critical errors occured during task execution

        :return: The error_code of this OMRResponse.
        :rtype: int
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """
        Sets the error_code of this OMRResponse.
        Integer field that indicates whether any critical errors occured during task execution

        :param error_code: The error_code of this OMRResponse.
        :type: int
        """

        self._error_code = error_code

    @property
    def error_text(self):
        """
        Gets the error_text of this OMRResponse.
        String description of occured critical error. Empty if no critical errors occured

        :return: The error_text of this OMRResponse.
        :rtype: str
        """
        return self._error_text

    @error_text.setter
    def error_text(self, error_text):
        """
        Sets the error_text of this OMRResponse.
        String description of occured critical error. Empty if no critical errors occured

        :param error_text: The error_text of this OMRResponse.
        :type: str
        """

        self._error_text = error_text

    @property
    def payload(self):
        """
        Gets the payload of this OMRResponse.
        Payload

        :return: The payload of this OMRResponse.
        :rtype: Payload
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """
        Sets the payload of this OMRResponse.
        Payload

        :param payload: The payload of this OMRResponse.
        :type: Payload
        """

        self._payload = payload

    @property
    def server_stat(self):
        """
        Gets the server_stat of this OMRResponse.
        Server statistics

        :return: The server_stat of this OMRResponse.
        :rtype: ServerStat
        """
        return self._server_stat

    @server_stat.setter
    def server_stat(self, server_stat):
        """
        Sets the server_stat of this OMRResponse.
        Server statistics

        :param server_stat: The server_stat of this OMRResponse.
        :type: ServerStat
        """

        self._server_stat = server_stat

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, OMRResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
