# coding: utf-8
"""
Copyright (c) 2018 Aspose Pty Ltd. All Rights Reserved.

Licensed under the MIT (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

      https://github.com/aspose-omr-cloud/aspose-omr-cloud-python/blob/master/LICENSE

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.



    Aspose.OMR for Cloud API Reference

    Aspose.OMR for Cloud helps performing optical mark recognition in the cloud

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
from pprint import pformat
from six import iteritems
import re


class OmrResponseInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'response_version': 'str',
        'processed_tasks_count': 'int',
        'successful_tasks_count': 'int',
        'details': 'OMRResponseDetails'
    }

    attribute_map = {
        'response_version': 'ResponseVersion',
        'processed_tasks_count': 'ProcessedTasksCount',
        'successful_tasks_count': 'SuccessfulTasksCount',
        'details': 'Details'
    }

    def __init__(self, response_version=None, processed_tasks_count=None, successful_tasks_count=None, details=None):
        """
        OmrResponseInfo - a model defined in Swagger
        """

        self._response_version = None
        self._processed_tasks_count = None
        self._successful_tasks_count = None
        self._details = None
        self.discriminator = None

        if response_version is not None:
          self.response_version = response_version
        self.processed_tasks_count = processed_tasks_count
        self.successful_tasks_count = successful_tasks_count
        if details is not None:
          self.details = details

    @property
    def response_version(self):
        """
        Gets the response_version of this OmrResponseInfo.
        String value representing version of the response.

        :return: The response_version of this OmrResponseInfo.
        :rtype: str
        """
        return self._response_version

    @response_version.setter
    def response_version(self, response_version):
        """
        Sets the response_version of this OmrResponseInfo.
        String value representing version of the response.

        :param response_version: The response_version of this OmrResponseInfo.
        :type: str
        """

        self._response_version = response_version

    @property
    def processed_tasks_count(self):
        """
        Gets the processed_tasks_count of this OmrResponseInfo.
        Total amount of processed tasks

        :return: The processed_tasks_count of this OmrResponseInfo.
        :rtype: int
        """
        return self._processed_tasks_count

    @processed_tasks_count.setter
    def processed_tasks_count(self, processed_tasks_count):
        """
        Sets the processed_tasks_count of this OmrResponseInfo.
        Total amount of processed tasks

        :param processed_tasks_count: The processed_tasks_count of this OmrResponseInfo.
        :type: int
        """
        if processed_tasks_count is None:
            raise ValueError("Invalid value for `processed_tasks_count`, must not be `None`")

        self._processed_tasks_count = processed_tasks_count

    @property
    def successful_tasks_count(self):
        """
        Gets the successful_tasks_count of this OmrResponseInfo.
        Total amount of successful tasks, i.e. tasks that completed without errors

        :return: The successful_tasks_count of this OmrResponseInfo.
        :rtype: int
        """
        return self._successful_tasks_count

    @successful_tasks_count.setter
    def successful_tasks_count(self, successful_tasks_count):
        """
        Sets the successful_tasks_count of this OmrResponseInfo.
        Total amount of successful tasks, i.e. tasks that completed without errors

        :param successful_tasks_count: The successful_tasks_count of this OmrResponseInfo.
        :type: int
        """
        if successful_tasks_count is None:
            raise ValueError("Invalid value for `successful_tasks_count`, must not be `None`")

        self._successful_tasks_count = successful_tasks_count

    @property
    def details(self):
        """
        Gets the details of this OmrResponseInfo.
        Additional information regarding performed task.

        :return: The details of this OmrResponseInfo.
        :rtype: OMRResponseDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """
        Sets the details of this OmrResponseInfo.
        Additional information regarding performed task.

        :param details: The details of this OmrResponseInfo.
        :type: OMRResponseDetails
        """

        self._details = details

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, OmrResponseInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
