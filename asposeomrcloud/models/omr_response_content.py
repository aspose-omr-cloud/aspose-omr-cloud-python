# coding: utf-8
"""
Copyright (c) 2018 Aspose Pty Ltd. All Rights Reserved.

Licensed under the MIT (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

      https://github.com/aspose-omr-cloud/aspose-omr-cloud-python/blob/master/LICENSE

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.



    Aspose.OMR for Cloud API Reference

    Aspose.OMR for Cloud helps performing optical mark recognition in the cloud

    OpenAPI spec version: 1.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
from pprint import pformat
from six import iteritems
import re


class OmrResponseContent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'template_id': 'str',
        'execution_time': 'float',
        'response_files': 'list[FileInfo]',
        'info': 'OmrResponseInfo'
    }

    attribute_map = {
        'template_id': 'TemplateId',
        'execution_time': 'ExecutionTime',
        'response_files': 'ResponseFiles',
        'info': 'Info'
    }

    def __init__(self, template_id=None, execution_time=None, response_files=None, info=None):
        """
        OmrResponseContent - a model defined in Swagger
        """

        self._template_id = None
        self._execution_time = None
        self._response_files = None
        self._info = None
        self.discriminator = None

        if template_id is not None:
          self.template_id = template_id
        self.execution_time = execution_time
        if response_files is not None:
          self.response_files = response_files
        if info is not None:
          self.info = info

    @property
    def template_id(self):
        """
        Gets the template_id of this OmrResponseContent.
        GUID string that is used to identify template on server This value is assigned after Template Correction and used later in Template Finalization and Image Recognition

        :return: The template_id of this OmrResponseContent.
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """
        Sets the template_id of this OmrResponseContent.
        GUID string that is used to identify template on server This value is assigned after Template Correction and used later in Template Finalization and Image Recognition

        :param template_id: The template_id of this OmrResponseContent.
        :type: str
        """

        self._template_id = template_id

    @property
    def execution_time(self):
        """
        Gets the execution_time of this OmrResponseContent.
        Indicates how long it took to perform task on server.

        :return: The execution_time of this OmrResponseContent.
        :rtype: float
        """
        return self._execution_time

    @execution_time.setter
    def execution_time(self, execution_time):
        """
        Sets the execution_time of this OmrResponseContent.
        Indicates how long it took to perform task on server.

        :param execution_time: The execution_time of this OmrResponseContent.
        :type: float
        """
        if execution_time is None:
            raise ValueError("Invalid value for `execution_time`, must not be `None`")

        self._execution_time = execution_time

    @property
    def response_files(self):
        """
        Gets the response_files of this OmrResponseContent.
        This structure holds array of files returned in response Type and content of files differes depending on action

        :return: The response_files of this OmrResponseContent.
        :rtype: list[FileInfo]
        """
        return self._response_files

    @response_files.setter
    def response_files(self, response_files):
        """
        Sets the response_files of this OmrResponseContent.
        This structure holds array of files returned in response Type and content of files differes depending on action

        :param response_files: The response_files of this OmrResponseContent.
        :type: list[FileInfo]
        """

        self._response_files = response_files

    @property
    def info(self):
        """
        Gets the info of this OmrResponseContent.

        :return: The info of this OmrResponseContent.
        :rtype: OmrResponseInfo
        """
        return self._info

    @info.setter
    def info(self, info):
        """
        Sets the info of this OmrResponseContent.

        :param info: The info of this OmrResponseContent.
        :type: OmrResponseInfo
        """

        self._info = info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, OmrResponseContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
